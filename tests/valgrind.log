==199636== Memcheck, a memory error detector
==199636== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==199636== Using Valgrind-3.18.1 and LibVEX; rerun with -h for copyright info
==199636== Command: ./tests/state_tests
==199636== Parent PID: 199604
==199636== 
==199636== Conditional jump or move depends on uninitialised value(s)
==199636==    at 0x10A271: StateManager_pop (state.c:45)
==199636==    by 0x10A2BF: StateManager_free (state.c:17)
==199636==    by 0x109A75: test_free (state_tests.c:74)
==199636==    by 0x10A075: all_tests (state_tests.c:87)
==199636==    by 0x10921A: main (state_tests.c:92)
==199636== 
==199636== Use of uninitialised value of size 8
==199636==    at 0x10A275: StateManager_pop (state.c:45)
==199636==    by 0x10B061: ??? (in /home/lancer/item/pixellab/tests/state_tests)
==199636==    by 0x10A2BF: StateManager_free (state.c:17)
==199636==    by 0x109A75: test_free (state_tests.c:74)
==199636==    by 0x10A075: all_tests (state_tests.c:87)
==199636==    by 0x10921A: main (state_tests.c:92)
==199636== 
vex amd64->IR: unhandled instruction bytes: 0xFF 0xFE 0x1F 0x0 0x0 0x0 0x14 0x0 0x0 0x0
vex amd64->IR:   REX=0 REX.W=0 REX.R=0 REX.X=0 REX.B=0
vex amd64->IR:   VEX=0 VEX.L=0 VEX.nVVVV=0x0 ESC=NONE
vex amd64->IR:   PFX.66=0 PFX.F2=0 PFX.F3=0
==199636== valgrind: Unrecognised instruction at address 0x4a9648a.
==199636==    at 0x4A9648A: ???
==199636==    by 0x10A276: StateManager_pop (state.c:45)
==199636==    by 0x10A2BF: StateManager_free (state.c:17)
==199636==    by 0x109A75: test_free (state_tests.c:74)
==199636==    by 0x10A075: all_tests (state_tests.c:87)
==199636==    by 0x10921A: main (state_tests.c:92)
==199636== Your program just tried to execute an instruction that Valgrind
==199636== did not recognise.  There are two possible reasons for this.
==199636== 1. Your program has a bug and erroneously jumped to a non-code
==199636==    location.  If you are running Memcheck and you just saw a
==199636==    warning about a bad jump, it's probably your program's fault.
==199636== 2. The instruction is legitimate but Valgrind doesn't handle it,
==199636==    i.e. it's Valgrind's fault.  If you think this is the case or
==199636==    you are not sure, please let us know and we'll try to fix it.
==199636== Either way, Valgrind will now raise a SIGILL signal which will
==199636== probably kill your program.
==199636== 
==199636== Process terminating with default action of signal 4 (SIGILL)
==199636==  Illegal opcode at address 0x4A9648A
==199636==    at 0x4A9648A: ???
==199636==    by 0x10A276: StateManager_pop (state.c:45)
==199636==    by 0x10A2BF: StateManager_free (state.c:17)
==199636==    by 0x109A75: test_free (state_tests.c:74)
==199636==    by 0x10A075: all_tests (state_tests.c:87)
==199636==    by 0x10921A: main (state_tests.c:92)
==199636== 
==199636== HEAP SUMMARY:
==199636==     in use at exit: 1,072 bytes in 3 blocks
==199636==   total heap usage: 5 allocs, 2 frees, 1,120 bytes allocated
==199636== 
==199636== LEAK SUMMARY:
==199636==    definitely lost: 0 bytes in 0 blocks
==199636==    indirectly lost: 0 bytes in 0 blocks
==199636==      possibly lost: 0 bytes in 0 blocks
==199636==    still reachable: 1,072 bytes in 3 blocks
==199636==         suppressed: 0 bytes in 0 blocks
==199636== Rerun with --leak-check=full to see details of leaked memory
==199636== 
==199636== Use --track-origins=yes to see where uninitialised values come from
==199636== For lists of detected and suppressed errors, rerun with: -s
==199636== ERROR SUMMARY: 2 errors from 2 contexts (suppressed: 0 from 0)
